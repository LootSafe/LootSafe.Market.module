const expectThrow = require('./helpers/expectThrow')

const Inventory = artifacts.require('Inventory.sol')
const Market = artifacts.require('Market.sol')
const EIP20 = artifacts.require('Token/EIP20.sol')
const gasPrice = 6000029

contract('Market', (accounts) => {
  it('should deploy an Inventory', async () => {
    const instance = await Inventory.new(accounts[0])
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should deploy a Market', async () => {
    const instance = await Market.new()
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should create an inventory', async () => {
    const instance = await Market.new()
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    if (myInventory === undefined) throw new Error('inventory creation failed')
  })

  it('should deposit to an inventory', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    const inventoryBalance = await gold.balanceOf.call(myInventory)
    const myBalance = await gold.balanceOf.call(accounts[1])
    if (inventoryBalance.toString() !== '10') throw new Error('expected inventory balance to be 10')
    if (myBalance.toString() !== '0') throw new Error('expected my balance to be 0')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should throw if merchant cannot fullfil trade', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 5, { from: accounts[1] })
    await expectThrow(instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]}))
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should create a trade on the market', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    if (trades.length !== 1) throw new Error('expected a trade to exist by merchant')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should throw when withdrawaling assets locked in a trade on the market', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    await expectThrow(instance.withdrawal(gold.address, 10, { from: accounts[1] }))
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should allow withdrawal with available assets with active trades', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 11)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 11, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    await instance.withdrawal(gold.address, 1, { from: accounts[1] })
    const myBalance = await gold.balanceOf.call(accounts[1])
    if (myBalance.toString() !== '1') throw new Error ('expected balance of 1 on my account')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should settle a trade on the market', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    await instance.settleTrade(trades[0], { from: accounts[1] })
    const trade = await instance.getTrade(trades[0])
    if (!trade[6]) throw new Error('expected trade to be settled')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should allow withdrawal of items from settled offer', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    await instance.settleTrade(trades[0], { from: accounts[1] })
    const trade = await instance.getTrade(trades[0])
    await instance.withdrawal(gold.address, 10, { from: accounts[1] })
    const myBalance = await gold.balanceOf.call(accounts[1])
    if (!trade[6]) throw new Error('expected trade to be settled')
    if (myBalance.toString() !== '10') throw new Error('expected balance to be 10')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should list a merchants trades on the market', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTradesByMerchant(accounts[1])
    if (trades.length !== 1) throw new Error('expected trades to be listed by merchant')
    if (instance.address === undefined) throw new Error('deployment failed')
  })

  it('should list a all trades on the market', async () => {
    const instance = await Market.new()
    const gold = await EIP20.new(100, 'Gold', 0, 'GOLD')
    const item = await EIP20.new(10, 'Item', 0, 'ITEM')
    await gold.transfer(accounts[1], 10)
    web3.eth.sendTransaction({ from: accounts[1], to: instance.address, value: 0, gas: gasPrice })
    const myInventory = await instance.getMyInventory.call({from: accounts[1]})
    await gold.transfer(myInventory, 10, { from: accounts[1] })
    await instance.makeOffer(gold.address,item.address,10,1,{from: accounts[1]})
    const trades = await instance.getTrades()
    if (trades.length !== 1) throw new Error('expected trades to be listed by merchant')
    if (instance.address === undefined) throw new Error('deployment failed')
  })
})